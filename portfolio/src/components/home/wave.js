import React, { useRef, useEffect } from "react"
import { useWindowSize } from "react-use"

const Wave = ({ dark }) => {
  const path = useRef(null)
  const { width } = useWindowSize()

  const m = 0.512286623256592433

  function buildWave(w, h) {
    const a = h / 6.25
    const y = h / 1.25

    const pathData = [
      "M",
      w * 0,
      y + a / 2,
      "c",
      a * m,
      0,
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
      "s",
      -(1 - a) * m,
      a,
      a,
      a,
      "s",
      -(1 - a) * m,
      -a,
      a,
      -a,
    ].join(" ")

    path.current.setAttribute("d", pathData)
  }

  useEffect(() => {
    buildWave(95, 33)
  }, [])

  return (
    <div className="wave-container">
      <svg
        className="wave-svg"
        xmlns="http://www.w3.org/2000/svg"
        width={width <= 1000 ? "179px" : "260px"}
        height="60px"
        viewBox={width <= 1000 ? "5 0 170 60" : "5 0 250 60"}
      >
        <path
          ref={path}
          id="wave"
          fill="none"
          stroke={dark ? "#00d1d8" : "#0f00d5"}
          strokeWidth={width <= 1000 ? "3.5" : "4"}
          strokeLinecap="round"
        ></path>
      </svg>
    </div>
  )
}

export default Wave
